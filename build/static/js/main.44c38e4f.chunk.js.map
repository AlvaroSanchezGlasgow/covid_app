{"version":3,"sources":["Static/svg/medical_research_pink.svg","Static/svg/doctors_pink.svg","Sections/InitialSection.js","Components/HeaderComponent.js","HomePage/HomePage.js","DashboardPage/DashboardPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","axios","require","InitialSection","useState","result","setResult","error","setError","errorDescription","setErrorDesc","fetchData","a","get","headers","then","response","data","catch","console","log","finally","useEffect","className","Intl","NumberFormat","format","Global","NewConfirmed","TotalConfirmed","NewDeaths","TotalDeaths","NewRecovered","TotalRecovered","message","to","src","medical_research","alt","HeaderComponent","HomePage","id","DashboardPage","country","setCountryName","handleClick","class","aria-label","name","type","placeholder","maxLength","onKeyDown","e","keyCode","onChange","target","value","handleChange","onClick","width","height","dataKey","stroke","strokeDasharray","doctorsImg","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.44c38e4f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/medical_research_pink.1c804caf.svg\";","module.exports = __webpack_public_path__ + \"static/media/doctors_pink.65b8fc85.svg\";","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport medical_research from '../Static/svg/medical_research_pink.svg';\nimport {Link} from \"react-router-dom\";\n\nconst axios = require('axios');\n\nfunction InitialSection() {\n    const [result, setResult] = useState();\n    const [error, setError] = useState(false);\n    const [errorDescription, setErrorDesc] = useState(false);\n    const fetchData = async () => {\n        await axios.get(`https://api.covid19api.com/summary`, {\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        })\n            .then(function (response) {\n                setError(false);\n                //  alert(JSON.stringify(response));\n                setResult(response.data);\n            })\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n                setErrorDesc(error);\n                setError(true);\n\n            })\n            .finally(function () {\n                // always executed\n            });\n\n\n    };\n\n    useEffect(() => { fetchData(); }, []);\n\n    return (\n        <>\n            <div className=\"container\">\n                <div className=\"columns\">\n                    <div className=\"column\">\n                        <div className=\"centered\">\n                            <h2>Global Covid-19 Statistics</h2>\n\n                            {result &&\n                                <>\n                                    <div className='is-result'>\n                                        <p><strong>New  Confirmed:</strong> {new Intl.NumberFormat('en-GB').format(result.Global.NewConfirmed)}</p>\n                                        <p><strong>Total Confirmed:</strong> {new Intl.NumberFormat('en-GB').format(result.Global.TotalConfirmed)}</p>\n                                        <p><strong>New  Deaths:</strong> {new Intl.NumberFormat('en-GB').format(result.Global.NewDeaths)}</p>\n                                        <p><strong>Total Deaths:</strong> {new Intl.NumberFormat('en-GB').format(result.Global.TotalDeaths)}</p>\n                                        <p><strong>New  Recovered:</strong> {new Intl.NumberFormat('en-GB').format(result.Global.NewRecovered)}</p>\n                                        <p><strong>Total  Recovered:</strong> {new Intl.NumberFormat('en-GB').format(result.Global.TotalRecovered)}</p>\n                                    </div>\n                                </>\n                            }\n\n                            {error &&\n                                <>\n                                    <div className='is-error'>\n\n                                        <p>Ups!! Something was wrong</p>\n                                        <p>{errorDescription.message}</p>\n                                        \n                                    </div>\n                                </>\n                            }\n                            <Link to='/byCountry' className=\"button is-text\">\n                                See data by country\n                            </Link>\n                        </div>\n                    </div>\n                    <div className=\"column\">\n                        <figure className=\"image\">\n                            <img src={medical_research} alt=\"\" />\n                        </figure>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default InitialSection;\n","import React from 'react';\n\n\n\nfunction HeaderComponent() {\n    return (\n        <>\n            <h1>covid-19 app</h1>\n        </>\n    );\n}\n\nexport default HeaderComponent;\n","import React from 'react';\nimport InitialSection from '../Sections/InitialSection.js';\nimport HeaderComponent from '../Components/HeaderComponent.js';\n\n\n\nfunction HomePage() {\n    return (\n        <>\n       <header>\n            <HeaderComponent/>\n       </header>\n       <main>\n            <section id='main_section'>\n              <InitialSection />\n            </section>\n            \n        </main>\n        </>\n    );\n}\n\nexport default HomePage;\n","import React from 'react';\nimport { useState } from 'react';\nimport { Link } from \"react-router-dom\";\nimport doctorsImg from '../Static/svg/doctors_pink.svg';\nimport { LineChart, Line, Tooltip, Legend, XAxis, YAxis, CartesianGrid } from 'recharts';\n\n\nconst axios = require('axios');\n\nfunction DashboardPage() {\n    const [result, setResult] = useState();\n    const [country, setCountryName] = useState();\n    const [error, setError] = useState(false);\n    const [errorDescription, setErrorDesc] = useState(false);\n\n    const handleChange = (e) => {\n        setCountryName(\n            e.target.value\n        )\n    }\n\n    const handleKey = (event) => {\n        if (event.keyCode === 13) {\n            handleClick();\n        }\n    }\n\n\n\n    const handleClick = () => {\n\n        axios.get(`https://api.covid19api.com/country/${country}`, {\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        })\n            .then(function (response) {\n                setError(false);\n                setResult(response);\n            })\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n                setErrorDesc(error);\n                setError(true);\n\n            })\n            .finally(function () {\n                // always executed\n            });\n\n\n    };\n\n    //useEffect(() => { fetchData(); }, []);\n\n\n    return (\n        <>\n            <div className=\"container\">\n                <header>\n                    <h1>Covid-19 By Country</h1>\n                    <nav class=\"breadcrumb has-arrow-separator\" aria-label=\"breadcrumbs\">\n                        <ul>\n                            <li><Link to=\"/\">Home</Link></li>\n                            <li class=\"is-active\"><Link to=\"/byCountry\">Covid-19 by Country</Link></li>\n                        </ul>\n                    </nav>\n                </header>\n                <main>\n                    <div className=\"container\">\n                        <div className=\"columns is-centered\">\n                            <div className=\"column\">\n                                <div className=\"field\">\n                                    <label className=\"label\"></label>\n                                    <div className=\"control\">\n                                        <input id=\"country\" name=\"country\" className=\"input\" type=\"text\" placeholder=\"Country\" maxLength=\"50\" onKeyDown={(e) => handleKey(e)} onChange={e => handleChange(e)} />\n                                    </div>\n                                </div>\n                                <div className=\"field is-grouped\">\n                                    <div className=\"control\">\n                                        <button className=\"button is-primary\" onClick={() => handleClick()}>see data</button>\n\n                                    </div>\n\n                                </div>\n                                {result &&\n                                    <>\n                                        <center>\n\n                                            <LineChart width={800} height={450} data={result.data}>\n                                                <XAxis dataKey=\"Date\" />\n                                                <YAxis />\n                                                <Tooltip />\n                                                <Legend />\n                                                <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\" />\n                                                <Line type=\"monotone\" dataKey=\"Confirmed\" stroke=\"#4B4B4B\" />\n                                                <Line type=\"monotone\" dataKey=\"Deaths\" stroke=\"#FF57BB\" />\n                                                <Line type=\"monotone\" dataKey=\"Recovered\" stroke=\"#0091AD\" />\n                                                <Line type=\"monotone\" dataKey=\"Active\" stroke=\"#6EFAFB\" />\n                                            </LineChart>\n\n                                        </center>\n                                    </>\n                                }\n\n                            </div>\n                        </div>\n\n                        <div className=\"columns is-centered\">\n                            {!result &&\n                                <div className=\"column is-half\">\n                                    <img src={doctorsImg} alt=\"\" />\n                                </div>\n                            }\n                        </div>\n                    </div>\n\n                </main>\n            </div>\n        </>\n    );\n}\n\nexport default DashboardPage;\n","import React from 'react';\nimport HomePage from './HomePage/HomePage.js';\nimport styles from './Static/scss/styles.scss';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport DashboardPage from './DashboardPage/DashboardPage.js';\n\nfunction App() {\n  return (\n    <>\n      <Router>\n\n        <Switch>\n          <Route exact path=\"/\">\n            <HomePage />\n          </Route>\n\n          <Route exact path=\"/byCountry\">\n            <DashboardPage />\n          </Route>\n        </Switch>\n\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}